# import asyncio
# import random
# import re
# import os
# import logging
# import nest_asyncio
# from staroe.idea import IDEA_PROJECTS
# from staroe.slowa import EXTENDED_RESPONSES  # —Å–ª–æ–≤–∞—Ä—å —Å ¬´–±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–º–∏¬ª, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏
# from telegram import Update, ReplyKeyboardRemove
# from telegram.ext import Application, CommandHandler, MessageHandler, filters
# from staroe.comnerrors import COMMON_ERRORS
# import torch
# import torch.nn as nn
# from PIL import Image, ImageDraw, ImageFont

# # from allGPT.config import BOT_TOKEN

# nest_asyncio.apply()

# # --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
# logging.basicConfig(
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#     level=logging.INFO
# )
# logger = logging.getLogger(__name__)

# # --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–û–í–û–ô –ò–°–¢–û–†–ò–ï–ô ---
# conversation_history = {}
# MAX_CONTEXT = 20  # —Ç–µ–ø–µ—Ä—å –∏—Å—Ç–æ—Ä–∏—è –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π

# def update_conversation(chat_id: int, message: str) -> None:
#     if chat_id not in conversation_history:
#         conversation_history[chat_id] = []
#     conversation_history[chat_id].append(message)
#     if len(conversation_history[chat_id]) > MAX_CONTEXT:
#         conversation_history[chat_id] = conversation_history[chat_id][-MAX_CONTEXT:]

# def get_context(chat_id: int) -> str:
#     return " ".join(conversation_history.get(chat_id, []))

# # --- –ù–ï–ô–†–û–°–ï–¢–ï–í–ê–Ø –ó–ê–ì–õ–£–®–ö–ê ---
# class ConversationalAI(nn.Module):
#     def __init__(self, input_size: int, hidden_size: int, output_size: int):
#         super(ConversationalAI, self).__init__()
#         self.layer1 = nn.Linear(input_size, hidden_size)
#         self.activation = nn.ReLU()
#         self.layer2 = nn.Linear(hidden_size, output_size)
    
#     def forward(self, x: torch.Tensor) -> torch.Tensor:
#         return self.layer2(self.activation(self.layer1(x)))

# model = ConversationalAI(10, 20, 10)
# tokenizer = lambda text: torch.tensor([random.uniform(-1, 1) for _ in range(10)], dtype=torch.float32)

# # --- –§–£–ù–ö–¶–ò–ò –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê ---
# def normalize_word(word: str) -> str:
#     return re.sub(r'^[^a-zA-Z–∞-—è–ê-–Ø—ë–Å]+', '', word)

# def correct_text(text: str) -> str:
#     words = text.split()
#     corrected_words = [COMMON_ERRORS.get(normalize_word(word).lower(), word) for word in words]
#     return " ".join(corrected_words)

# def fix_missing_spaces(text: str) -> str:
#     """
#     –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –ø—Ä–æ–±–µ–ª–æ–≤, –ø—ã—Ç–∞–µ–º—Å—è –≤–Ω–µ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
#     """
#     if " " in text:
#         return text
#     common_phrases = ["–ø—Ä–∏–≤–µ—Ç", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–ø–æ–º–æ–≥–∏", "—á—Ç–æ", "–∫–∞–∫", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–∫–æ–¥", "–¥–µ–ª–∞", "—Ç—ã", "—Å–µ–≥–æ–¥–Ω—è"]
#     for phrase in common_phrases:
#         text = text.replace(phrase, f" {phrase} ")
#     return ' '.join(text.split())

# # --- –ó–ê–ì–û–¢–û–í–ö–ò –û–¢–í–ï–¢–û–í ---
# RESPONSES = {
#     "–ø—Ä–∏–≤–µ—Ç": ["–ü—Ä–∏–≤–µ—Ç! üòÉ –ö–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?", "–ó–¥–∞—Ä–æ–≤–∞! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!", "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?"],
#     "–∫–∞–∫ –¥–µ–ª–∞": ["–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?", "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –∞ –∫–∞–∫ —Å–∞–º?", "–í—Å—ë —Å—É–ø–µ—Ä!"],
#     "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ": ["–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—É–ø–µ—Ä!", "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!", "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"],
#     "–ø–æ–∫–∞": ["–ü–æ–∫–∞! –ë–µ—Ä–µ–≥–∏ —Å–µ–±—è!", "–î–æ –≤—Å—Ç—Ä–µ—á–∏!", "–ü–æ–∫–∞-–ø–æ–∫–∞!"],
#     "–Ω–µ —É–º–µ—é": ["–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å–µ –º—ã —É—á–∏–º—Å—è!", "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è!", "–ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—ã—Ç–∞—Ç—å—Å—è!"]
# }

# # --- –ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ù–ò–Ø ---
# SENTIMENT_WORDS = {
#     "–æ—Ç–ª–∏—á–Ω–æ": 1.0, "—Ö–æ—Ä–æ—à–æ": 0.8, "—Å—É–ø–µ—Ä": 1.0, "—Ä–∞–¥": 0.9,
#     "–ª—é–±–ª—é": 1.0, "—Å—á–∞—Å—Ç–ª–∏–≤": 0.9, "–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ": -1.0,
#     "–ø–ª–æ—Ö–æ": -1.0, "—É–∂–∞—Å–Ω–æ": -1.0, "–æ—Ç—Å—Ç–æ–π": -0.8,
#     "–Ω–µ –∑–Ω–∞—é": -0.5, "—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω": -1.0, "–≥—Ä—É—Å—Ç—å": -0.9, "–ø–µ—á–∞–ª—å–Ω–æ": -0.8
# }

# SENTIMENT_RESPONSES = {
#     "positive": ["–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!", "–Ø —Ä–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ!"],
#     "negative": ["–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!", "–î–µ—Ä–∂–∏—Å—å, –ø–ª–æ—Ö–∏–µ –º–æ–º–µ–Ω—Ç—ã –ø—Ä–æ–π–¥—É—Ç. –Ø —Å —Ç–æ–±–æ–π!"],
#     "neutral": []
# }

# def analyze_sentiment(text: str) -> float:
#     words = text.lower().split()
#     if not words:
#         return 0.0
#     score = 0.0
#     count = 0
#     for word in words:
#         if word in SENTIMENT_WORDS:
#             score += SENTIMENT_WORDS[word]
#             count += 1
#     return score / count if count else 0.0

# def classify_sentiment(score: float) -> str:
#     if score > 0.3:
#         return "positive"
#     elif score < -0.3:
#         return "negative"
#     else:
#         return "neutral"

# def enrich_with_sentiment(response: str, sentence: str) -> str:
#     score = analyze_sentiment(sentence)
#     sentiment = classify_sentiment(score)
#     extra = ""
#     if SENTIMENT_RESPONSES[sentiment]:
#         extra = " " + random.choice(SENTIMENT_RESPONSES[sentiment])
#     return response + extra

# def enrich_response_with_sentiment(response: str, text: str) -> str:
#     """
#     –î–æ–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ —Ä–∞–¥–æ—Å—Ç–Ω—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∫ –¥–∏–∞–ª–æ–≥—É.
#     –ü—Ä–∏ –ª—é–±–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –±–æ—Ç –≤—ã–¥–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è.
#     """
#     score = analyze_sentiment(text)
#     sentiment = classify_sentiment(score)
#     if sentiment == "negative":
#         response += " –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä—É–¥–Ω–æ. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ."
#     else:
#         response += " –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –æ–±—â–µ–Ω–∏—é –∏ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º! –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—â—ë —á—Ç–æ-—Ç–æ –µ—Å—Ç—å, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π!"
#     return response

# # --- –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–û–í –° –£–ß–ï–¢–û–ú –ö–û–ù–¢–ï–ö–°–¢–ê ---
# def generate_dynamic_response(user_message: str, conv_context: str) -> str:
#     """
#     –§–æ—Ä–º–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Ç—Ä—ë—Ö —á–∞—Å—Ç–µ–π: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞.
#     –ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —É–∂–µ –∏–¥–µ—Ç (conv_context –Ω–µ –ø—É—Å—Ç–æ–π), –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
#     """
#     # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ ‚Äî –≤–∫–ª—é—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏–Ω–∞—á–µ –Ω–µ—Ç
#     greeting = random.choice(["–ü—Ä–∏–≤–µ—Ç!", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!"]) if not conv_context.strip() else ""
    
#     lower_msg = user_message.lower()
#     if "–ø—Ä–∏–≤–µ—Ç" in lower_msg:
#         # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —è–≤–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –Ω–æ –±–µ—Å–µ–¥–∞ —É–∂–µ –∏–¥–µ—Ç, –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         bodies = (["–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!", "–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!", "–†–∞–¥, —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–∞—Ç—å—Å—è!"]
#                   if conv_context.strip() else [
#                       "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç—ã –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫–æ –º–Ω–µ.",
#                       "–†–∞–¥ —Å–ª—ã—à–∞—Ç—å —Ç–µ–±—è! –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
#                       "–ü—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å —Ç–∞–∫–æ–µ —Ç—ë–ø–ª–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."
#                   ])
#     elif "–ø–æ–º–æ–≥" in lower_msg or "–∑–∞–¥–∞—á" in lower_msg:
#         bodies = [
#             "–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.",
#             "–Ø —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ.",
#             "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç."
#         ]
#     else:
#         bodies = [
#             "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å, –æ —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å, –≤–µ–¥—å –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –≤–∞–∂–µ–Ω!",
#             "–ù–∏–∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –±—ã–≤–∞—é—Ç –≥–ª—É–ø—ã–º–∏ ‚Äì —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!",
#             "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!"
#         ]
    
#     closings = [
#         "–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!", "–û–±—Ä–∞—â–∞–π—Å—è –≤—Å–µ–≥–¥–∞!", "–î–∞–≤–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –≤–º–µ—Å—Ç–µ."
#     ]
    
#     if greeting:
#         return f"{greeting} {random.choice(bodies)} {random.choice(closings)}"
#     else:
#         return f"{random.choice(bodies)} {random.choice(closings)}"

# def lookup_extended_info(user_message: str) -> str:
#     """
#     –ò—â–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏, –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ EXTENDED_RESPONSES.
#     """
#     lower_msg = user_message.lower()
#     info_list = []
#     for keyword, facts in EXTENDED_RESPONSES.items():
#         if keyword in lower_msg:
#             info_list.append(random.choice(facts))
#     if info_list:
#         return " –ö—Å—Ç–∞—Ç–∏, –∑–Ω–∞–µ—à—å? " + " ".join(info_list)
#     return ""

# def generate_final_response(user_message: str, conv_context: str) -> str:
#     """
#     –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã.
#     """
#     base_response = generate_dynamic_response(user_message, conv_context)
#     extended_info = lookup_extended_info(user_message)
#     final_response = enrich_response_with_sentiment(base_response, user_message)
#     if extended_info:
#         final_response += extended_info
#     return final_response

# # --- –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–û–í (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ---
# def generate_extended_response(text_segment: str, conv_context: str) -> str | None:
#     lower_text = text_segment.lower()
#     responses_found = []
#     for key, responses in EXTENDED_RESPONSES.items():
#         if key in lower_text:
#             responses_found.append(random.choice(responses))
#     if responses_found:
#         return " ".join(responses_found)
#     return None

# def generate_sentence_response(sentence: str, conv_context: str) -> str:
#     ext_response = generate_extended_response(sentence, conv_context)
#     if ext_response:
#         response = ext_response
#     else:
#         lower_sentence = sentence.lower()
#         if "–ø—Ä–∏–≤–µ—Ç" in lower_sentence:
#             response = random.choice(RESPONSES["–ø—Ä–∏–≤–µ—Ç"])
#         elif "–∫–∞–∫ –¥–µ–ª" in lower_sentence:
#             response = random.choice(RESPONSES["–∫–∞–∫ –¥–µ–ª–∞"])
#         elif "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" in lower_sentence:
#             response = random.choice(RESPONSES["–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"])
#         elif "–ø–æ–∫–∞" in lower_sentence:
#             response = random.choice(RESPONSES["–ø–æ–∫–∞"])
#         elif "–Ω–µ —É–º–µ—é" in lower_sentence:
#             response = random.choice(RESPONSES["–Ω–µ —É–º–µ—é"])
#         elif any(q in lower_sentence for q in ["–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–∫–∞–∫"]) and conv_context:
#             response = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª –ª—É—á—à–µ. ü§ì"
#         else:
#             tokenized = tokenizer(sentence)
#             _ = model(tokenized)
#             response = "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ú–æ–∂–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å?"
#     enriched = response + " " + random.choice(["‚ú®", "üî•", "üí•", "üåü", "üí´"])
#     return enrich_with_sentiment(enriched, sentence)

# def generate_combined_response(corrected_text: str, conv_context: str) -> str:
#     sentences = re.split(r'(?<=[.!?])\s+', corrected_text)
#     responses = []
#     for sentence in sentences:
#         if sentence.strip():
#             responses.append(generate_sentence_response(sentence, conv_context))
#     return " ".join(responses)

# def generate_response(corrected_text: str, conv_context: str) -> str:
#     combined = generate_combined_response(corrected_text, conv_context)
#     if combined and combined.strip():
#         return combined
#     return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å."

# # --- –§–£–ù–ö–¶–ò–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ö–û–î–ê (–µ—Å–ª–∏ –∫–æ–¥ –≤ —Ç—Ä–æ–π–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö) ---
# def extract_code_snippet(text: str) -> str:
#     m = re.search(r"```(.*?)```", text, flags=re.DOTALL)
#     if m:
#         return m.group(1).strip()
#     return ""

# # --- –†–ê–ë–û–¢–ê –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò ---
# def describe_image(image_path: str) -> str:
#     possible_descriptions = [
#         "—ç—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏—Ä–æ–¥—ã üå≥",
#         "–∑–¥–µ—Å—å –≤–∏–¥–µ–Ω –≥–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ–π–∑–∞–∂ üèôÔ∏è",
#         "–Ω–∞ —Ñ–æ—Ç–æ –ø–æ—Ä—Ç—Ä–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ üòä",
#         "—Å–Ω–∏–º–æ–∫ —Å —è—Ä–∫–∏–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏ üé®",
#         "–Ω–∞ —Ñ–æ—Ç–æ —á—Ç–æ-—Ç–æ –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ... ü§î"
#     ]
#     base = random.choice(possible_descriptions)
#     count = random.randint(1, 5)
#     return f"{base} –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {count} –æ–±—ä–µ–∫—Ç–æ–≤."

# def create_image(prompt: str) -> str:
#     """
#     –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Å—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–Ω–∏.
#     """
#     img_size = (512, 512)
#     bg_color = (random.randint(200, 255), random.randint(200, 255), random.randint(200, 255))
#     img = Image.new('RGB', img_size, color=bg_color)
#     draw = ImageDraw.Draw(img)
#     try:
#         font_size = 28
#         font = ImageFont.truetype("arial.ttf", font_size)
#     except IOError:
#         font = ImageFont.load_default()
    
#     max_width = img_size[0] - 40  # –æ—Ç—Å—Ç—É–ø—ã –ø–æ –±–æ–∫–∞–º
#     words = prompt.split()
#     lines = []
#     current_line = ""
#     for word in words:
#         test_line = f"{current_line} {word}".strip() if current_line else word
#         bbox = draw.textbbox((0, 0), test_line, font=font)
#         line_width = bbox[2] - bbox[0]
#         if line_width <= max_width:
#             current_line = test_line
#         else:
#             lines.append(current_line)
#             current_line = word
#     if current_line:
#         lines.append(current_line)
#     text = "\n".join(lines)
#     bbox = draw.multiline_textbbox((0, 0), text, font=font)
#     textwidth = bbox[2] - bbox[0]
#     textheight = bbox[3] - bbox[1]
#     position = ((img_size[0] - textwidth) / 2, (img_size[1] - textheight) / 2)
    
#     # –¢–µ–Ω–µ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
#     shadow_offset = 2
#     shadow_color = (0, 0, 0)
#     draw.multiline_text((position[0] + shadow_offset, position[1] + shadow_offset),
#                         text, font=font, fill=shadow_color, align="center")
#     draw.multiline_text(position, text, font=font, fill=(255, 255, 255), align="center")
    
#     filename = f"generated_{random.randint(1000,9999)}.jpg"
#     img.save(filename)
#     return filename

# # --- –†–µ—Å–ø–æ–Ω—Å—ã –¥–ª—è –ø–æ–º–æ—â–∏ —Å –∫–æ–¥–æ–º ---
# CODE_HELP_RESPONSES = {
#     "python": "–ü—Ä–∏–º–µ—Ä –Ω–∞ Python:\n```python\nprint('Hello, world!')\n```",
#     "telegram": ("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram-–±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π python-telegram-bot:\n"
#                  "```python\nfrom telegram import Update\nfrom telegram.ext import Application, CommandHandler\n# –¢–≤–æ–π –∫–æ–¥\n```"),
#     "—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞": "–î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π sorted:\n```python\nmy_list = [3, 1, 2]\nsorted_list = sorted(my_list)\n```",
#     "—Ñ—É–Ω–∫—Ü–∏—è": "–ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ Python:\n```python\ndef greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('World'))\n```",
#     "—Ü–∏–∫–ª": "–ü—Ä–∏–º–µ—Ä —Ü–∏–∫–ª–∞ for:\n```python\nfor i in range(5):\n    print(i)\n```",
#     "–∫–ª–∞—Å—Å": "–ü—Ä–∏–º–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞:\n```python\nclass Person:\n    def __init__(self, name):\n        self.name = name\n    def greet(self):\n        print(f'Hello, my name is {self.name}')\n\np = Person('Alice')\np.greet()\n```",
#     "—Å–ª–æ–≤–∞—Ä—å": "–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏:\n```python\ndict_example = {'a': 1, 'b': 2}\nprint(dict_example['a'])\n```",
#     "json": "–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å JSON:\n```python\nimport json\nsample = {'key': 'value'}\njson_str = json.dumps(sample)\nprint(json_str)\n```",
#     "sql": "–ü—Ä–∏–º–µ—Ä SQL-–∑–∞–ø—Ä–æ—Å–∞ —Å sqlite3:\n```python\nimport sqlite3\nconn = sqlite3.connect('example.db')\nc = conn.cursor()\nc.execute('SELECT * FROM table_name')\nrows = c.fetchall()\nprint(rows)\n```"
# }

# def get_code_help_response(query: str) -> str:
#     query_lower = query.lower()
#     for key, response in CODE_HELP_RESPONSES.items():
#         if key in query_lower:
#             return response
#     return "–ò–∑–≤–∏–Ω–∏, –Ω–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."

# def explain_code(code_snippet: str) -> str:
#     explanation = []
#     code_lower = code_snippet.lower()
#     if "def " in code_lower:
#         explanation.append("–≠—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ.")
#     if "for " in code_lower:
#         explanation.append("–¶–∏–∫–ª for –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º.")
#     if "if " in code_lower:
#         explanation.append("–£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –≤–µ—Ç–∫—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.")
#     if "class " in code_lower:
#         explanation.append("–û–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–ª–∞—Å—Å ‚Äî —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤.")
#     if not explanation:
#         explanation.append("–§—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ; –ø–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.")
#     return " ".join(explanation)

# # --- –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
# CODE_HELP_TRIGGERS = [
#     "–ø–æ–º–æ–≥–∏ —Å –∫–æ–¥–æ–º", "–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å", "–ø–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä", "–¥–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∫–æ–¥—É",
#     "–ø–æ–¥—Å–∫–∞–∂–∏ –∫–æ–¥", "–ø–æ–∫–∞–∂–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∫–æ–¥—É", "–¥–∞–π –∫–æ–¥", "–ø–æ–º–æ–≥–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
#     "–∫–æ–¥ –ø–æ–¥—Å–∫–∞–∑–∫–∞", "–¥–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É", "–ø–æ–∫–∞–∂–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É", "–ø–æ–¥—Å–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä", "–¥–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—é"
# ]

# IDEA_TRIGGERS = [
#     "–¥–∞–π –∏–¥–µ—é", "–∏–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", "–ø—Ä–µ–¥–ª–æ–∂–∏ –∏–¥–µ—é", "—Ö–æ—á—É –∏–¥–µ—é"
# ]

# PHOTO_TRIGGERS = [
#     "—Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ", "—Å–æ–∑–¥–∞–π —Ñ–æ—Ç–æ", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ–æ—Ç–∫—É", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ–æ—Ç–æ",
#     "—Å–¥–µ–ª–∞–π —Ñ–æ—Ç–∫—É", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
# ]

# # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
# async def handle_text_message(update: Update, context) -> None:
#     chat_id = update.effective_chat.id
#     user_input = update.message.text.strip()
    
#     # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ ‚Äì –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
#     user_input = fix_missing_spaces(user_input)
#     lower_input = user_input.lower()

#     # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∂–∏–¥–∞–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ç–æ)
#     if "action" in context.user_data:
#         action = context.user_data.pop("action")
#         if action == "create_photo":
#             prompt = user_input
#             filename = create_image(prompt)
#             with open(filename, "rb") as photo:
#                 await update.message.reply_photo(photo=photo, caption=f"–í–æ—Ç —Ç–≤–æ—ë —Ñ–æ—Ç–æ: {prompt}")
#             os.remove(filename)
#             return

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
#     if any(trigger in lower_input for trigger in PHOTO_TRIGGERS):
#         await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–µ —Ñ–æ—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å?")
#         context.user_data["action"] = "create_photo"
#         return

#     # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–¥
#     if any(trigger in lower_input for trigger in ["–æ–±—ä—è—Å–Ω–∏ –∫–æ–¥", "—Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥", "—Ä–∞–∑–±–µ—Ä–∏ –∫–æ–¥", "–ø–æ—è—Å–Ω–∏ –∫–æ–¥"]):
#         code_snippet = extract_code_snippet(user_input)
#         if code_snippet:
#             explanation = explain_code(code_snippet)
#             await update.message.reply_text(explanation, parse_mode="Markdown")
#         else:
#             await update.message.reply_text("–Ø –Ω–µ –≤–∏–∂—É –∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏ –∫–æ–¥, –∑–∞–∫–ª—é—á—ë–Ω–Ω—ã–π –≤ —Ç—Ä–æ–π–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (```).")
#         return

#     # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–¥–µ—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
#     if any(trigger in lower_input for trigger in IDEA_TRIGGERS):
#         idea = random.choice(IDEA_PROJECTS)
#         await update.message.reply_text(idea, parse_mode="Markdown")
#         return

#     # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â—å —Å –∫–æ–¥–æ–º
#     if any(trigger in lower_input for trigger in CODE_HELP_TRIGGERS):
#         response = get_code_help_response(user_input)
#         await update.message.reply_text(response, parse_mode="Markdown")
#         return

#     # –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
#     if "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" in lower_input:
#         await update.message.reply_text(random.choice(RESPONSES["–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"]))
#         return

#     # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
#     corrected = correct_text(user_input)
#     update_conversation(chat_id, corrected)
#     conv_context = get_context(chat_id)
#     logger.info(f"[Chat {chat_id}] –ü–æ–ª—É—á–µ–Ω–æ: {user_input} | –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {corrected}")
#     logger.info(f"[Chat {chat_id}] –ö–æ–Ω—Ç–µ–∫—Å—Ç: {conv_context}")
    
#     response = generate_final_response(user_input, conv_context)
#     update_conversation(chat_id, response)
#     await update.message.reply_text(response)

# # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ---
# async def handle_photo_message(update: Update, context) -> None:
#     chat_id = update.effective_chat.id
#     if not update.message.photo:
#         return
#     photo_file = await update.message.photo[-1].get_file()
#     local_filename = f"temp_{chat_id}.jpg"
#     await photo_file.download_to_drive(custom_path=local_filename)
#     image_description = describe_image(local_filename)
#     os.remove(local_filename)
#     reply_text = f"–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ñ–æ—Ç–æ –∏ –≤–∏–∂—É: {image_description}\n–ö–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ?"
#     update_conversation(chat_id, reply_text)
#     await update.message.reply_text(reply_text)

# # --- –ö–æ–º–∞–Ω–¥–∞ /start ---
# async def start_command(update: Update, context) -> None:
#     welcome = (
#         "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—á–∏–Ω–∞—é—â–∏–π –ò–ò, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —è–π—Ü–æ–º –≥–ª–µ–±–∞, –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å. üòä\n\n"
#         "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ.\n\n"
#         "–ü—Ä–∏–º–µ—Ä—ã:\n"
#         "‚Ä¢ '–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ –∑–∞–∫–∞—Ç–∞'\n"
#         "‚Ä¢ '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ Python?'\n"
#         "‚Ä¢ '–û–±—ä—è—Å–Ω–∏ –∫–æ–¥: ```python\nprint(\"Hello\")\n```'\n"
#         "‚Ä¢ '–î–∞–π –∏–¥–µ—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞'\n\n"
#         "–ü–∏—à–∏ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ‚Äì —è –≤—Å—ë –ø–æ–Ω–∏–º–∞—é!"
#     )
#     await update.message.reply_text(welcome, reply_markup=ReplyKeyboardRemove())

# # --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# async def main() -> None:
#     # app = Application.builder().token(BOT_TOKEN).build()
    
#     app.add_handler(CommandHandler("start", start_command))
#     app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
#     app.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))
    
#     logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∂–∏–≤–æ–º—É –¥–∏–∞–ª–æ–≥—É! üöÄ")
#     await app.run_polling()

# if __name__ == '__main__':
#     asyncio.run(main())
#     logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. üëã")